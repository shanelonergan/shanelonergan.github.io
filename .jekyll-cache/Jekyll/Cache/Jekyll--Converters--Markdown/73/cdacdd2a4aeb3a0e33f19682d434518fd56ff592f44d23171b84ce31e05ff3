I"71<hr />

<p>I am currently diving into my first job search as a software engineer, and so I recently had a mock technical interview. The interview was done in Javascript, and consisted of two questions. The first was a fairly standard algorithm question, but the second was quite interesting. I was asked to build the <code class="highlighter-rouge">document.getElementByClassName</code> method from scratch, as if it didn’t exist. I found it enlightening to build out a method that I had used so many times before, and improved my understanding of both DOM manipulation and Javascript as a whole. In this article I will walk you through the solution I came up with.</p>

<h2 id="table-of-contents">Table of Contents</h2>

<ul>
  <li><a href="#table-of-contents">Table of Contents</a></li>
  <li><a href="#goal">Goal</a></li>
  <li><a href="#example">Example</a></li>
  <li><a href="#plan">Plan</a></li>
  <li><a href="#code">Code</a>
    <ul>
      <li><a href="#step-1-set-up-the-main-function">Step 1: Set up the main function</a></li>
      <li><a href="#step-2-write-the-recursive-helper-function">Step 2: Write the recursive helper function</a></li>
      <li><a href="#step-3-put-it-all-together">Step 3: Put it all together</a></li>
      <li><a href="#step-4-add-to-the-html-element-prototype">Step 4: Add to the HTML Element prototype</a></li>
    </ul>
  </li>
  <li><a href="#references">References</a></li>
</ul>

<h2 id="goal">Goal</h2>

<p>The goal is to create a functionally equivalent version of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName"><code class="highlighter-rouge">document.getElementByClassName</code></a>. In order to do this, our new method needs to have to following functions:</p>

<ol>
  <li>Can be called on and HTML element</li>
  <li>Takes an argument, a string, containing any number of class names.</li>
  <li>Returns all elements that match all the class names passed in.</li>
  <li>Returns only elements that are children of the element the function was called on</li>
</ol>

<h2 id="example">Example</h2>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">'parent'</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">'hello'</span><span class="nt">&gt;</span>hello world 1<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">'hello'</span><span class="nt">&gt;</span>hello world 2<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">'hello'</span><span class="nt">&gt;</span>hello world 3<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">'hello'</span><span class="nt">&gt;</span>hello world 4<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">parent</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">parent</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">// =&gt;    &lt;div class='parent'&gt;&lt;/div&gt;</span>

<span class="kd">const</span> <span class="nx">helloWorlds</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">)</span>
<span class="c1">// =&gt; [  &lt;p class='hello'&gt;hello world 1&lt;/p&gt;,</span>
<span class="c1">//       &lt;p class='hello'&gt;hello world 2&lt;/p&gt;,</span>
<span class="c1">//       &lt;p class='hello'&gt;hello world 3&lt;/p&gt;,</span>
<span class="c1">//       &lt;p class='hello'&gt;hello world 4&lt;/p&gt;  ]</span>
</code></pre></div></div>

<h2 id="plan">Plan</h2>

<p>First, we need to create a conceptual plan for our function:</p>

<ol>
  <li>Create an array to store all the elements that are a match.</li>
  <li>Check all direct descendants of the main element for the class name
    <ol>
      <li>if any do, add them to the array</li>
    </ol>
  </li>
  <li>Check all of those children’s children the same way</li>
  <li>repeat until there are no more children</li>
</ol>

<p>Based on this plan, we will need to create a recursive helper function, or a function that calls itself within its own definition, to check all elements beneath the primary. We will call this helper function within the main function. The return value of the main function should be an array of elements, which we will declare as an empty array at the top, and add elements to as we move along.</p>

<p>Now that we have a solid plan, lets get coding!</p>

<h2 id="code">Code</h2>

<h3 id="step-1-set-up-the-main-function">Step 1: Set up the main function</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getElementsByClassName2</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>

   <span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">// the array we will add matching elements to</span>
   <span class="kd">const</span> <span class="nx">firstChildren</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span> <span class="c1">// all the children of the element the function is called on</span>

   <span class="k">return</span> <span class="nx">elements</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="step-2-write-the-recursive-helper-function">Step 2: Write the recursive helper function</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getElementsByClassName2</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>

   <span class="kd">function</span> <span class="nx">checkChildren</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>

      <span class="c1">// check if the child has a matching class. If so, oush the the elements array</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">className</span><span class="p">))</span> <span class="p">{</span>
         <span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span>
      <span class="p">}</span>

      <span class="c1">// check if that child has children of its own. If so, call checkChildren one each child</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">const</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">children</span>
         <span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">child</span> <span class="o">=&gt;</span> <span class="nx">checkChildren</span><span class="p">(</span><span class="nx">child</span><span class="p">))</span>
     <span class="p">}</span>
   <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<h3 id="step-3-put-it-all-together">Step 3: Put it all together</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getElementsByClassName2</span><span class="p">(</span><span class="nx">className</span><span class="p">)</span> <span class="p">{</span>

   <span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1">// the array we will add matching elements to</span>
   <span class="kd">const</span> <span class="nx">firstChildren</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span> <span class="c1">// all the children of the element the function is called on</span>

   <span class="kd">function</span> <span class="nx">checkChildren</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">className</span><span class="p">))</span> <span class="p">{</span>
         <span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span> <span class="p">{</span>
         <span class="kd">const</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">children</span>
         <span class="nx">children</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">child</span> <span class="o">=&gt;</span> <span class="nx">checkChildren</span><span class="p">(</span><span class="nx">child</span><span class="p">))</span>
     <span class="p">}</span>
   <span class="p">}</span>

   <span class="c1">// call the checkChildren method on the firstChildren</span>
   <span class="nx">firstChildren</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">child</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">checkChildren</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span>
   <span class="p">})</span>

    <span class="k">return</span> <span class="nx">elements</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="step-4-add-to-the-html-element-prototype">Step 4: Add to the HTML Element prototype</h3>

<p>In order for us to be able to call this function on any HTML Element, we need to add it to the HTML element prototype.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">HTMLElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getElementsByClassname2</span> <span class="o">=</span> <span class="nx">getElementsByClassName2</span>
</code></pre></div></div>

<p>And just like that, we are done! Our new method <code class="highlighter-rouge">getElementsByClassName2</code> now has the same functionality as the original <code class="highlighter-rouge">getElementsByClassName</code>.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName">MDN Docs: Document.getElementsByClassName()</a></li>
  <li><a href="https://guides.rubyonrails.org/active_record_basics.html">Active Record Basics</a></li>
  <li><a href="https://blog.bitsrc.io/what-is-an-orm-and-why-you-should-use-it-b2b6f75f5e2a">What is an ORM and Why You Should Use it</a></li>
  <li><a href="https://mixandgo.com/learn/what-is-a-ruby-reducer">What is a Ruby Reducer?</a></li>
  <li><a href="https://edgeguides.rubyonrails.org/association_basics.html#scopes-for-Belongs-to">Scopes for belongs_to</a></li>
</ul>
:ET